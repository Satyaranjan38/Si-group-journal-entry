package com.SiGroup.service;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.math.BigInteger;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.chemistry.opencmis.client.api.CmisObject;
import org.apache.chemistry.opencmis.client.api.Document;
import org.apache.chemistry.opencmis.client.api.Folder;
import org.apache.chemistry.opencmis.client.api.ItemIterable;
import org.apache.chemistry.opencmis.client.api.Session;
import org.apache.chemistry.opencmis.client.api.SessionFactory;
import org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl;
import org.apache.chemistry.opencmis.commons.PropertyIds;
import org.apache.chemistry.opencmis.commons.data.ContentStream;
import org.apache.chemistry.opencmis.commons.enums.VersioningState;
import org.apache.chemistry.opencmis.commons.impl.dataobjects.ContentStreamImpl;
import org.springframework.stereotype.Service;

import com.SiGroup.dto.ResponseDto;

@Service
public class DocumentManagementService {

	public ResponseDto uploadDocument(File file, String permitNumber, String company) {
		
		
		 
			//Getting the current date
		    Date date = new Date();
		      //This method returns the time in millis
		    long timeMilli = date.getTime();
		      
			String fileName=file.getName();
			int index=fileName.lastIndexOf('.');
			fileName=fileName.substring(0, index)+timeMilli;
			double fileSizeKb = (double)file.length()/1024;
			double fileSizeMb =(double)file.length()/(1024*1024);
			String fileSize="";
			if(fileSizeMb>=1.0)
				fileSize=fileSizeMb+"MB";
			else
				fileSize=fileSizeKb+"KB";
			System.out.println("File Size in MB/KB=="+fileSize);
			System.out.println("File Name::::"+fileName);
			System.out.println("[Foulath PTW][DocumentManagement][ServiceImpl][File] = " + file.getName());
			ResponseDto response = new ResponseDto();
			int count = 0;
			try {
				 String folderName=permitNumber;
				// default factory implementation
				SessionFactory factory = SessionFactoryImpl.newInstance();
				Map<String, String> parameter=getRepositorySessionConnection();
				Session session =factory.getRepositories(parameter).get(0).createSession();
				
				Folder root=session.getRootFolder();
				Folder parent=null;
				//Folder child=null;
				String DMS_FOLDER;
				if(company.trim().equalsIgnoreCase("BS")==true) {
					DMS_FOLDER =ApplicationConstants.DMS_BS_ROOT_FOLDER;
					System.out.println(" CHILD FOLDER==="+DMS_FOLDER);
					parent=(Folder)session.getObject(DMS_FOLDER);
				}
				else {
					DMS_FOLDER =ApplicationConstants.DMS_SULB_ROOT_FOLDER;
					System.out.println("CHILD FOLDER==="+DMS_FOLDER);
					parent=(Folder)session.getObject(DMS_FOLDER);
				}
				Folder child = null;
				String folderId = null;
				ItemIterable<CmisObject> childs = parent.getChildren();
				for (CmisObject O : childs) {
					System.out.println(O.getName());
					if (O.getName().equalsIgnoreCase(folderName)) {
						folderId = O.getId();
						child = (Folder) O;
						System.out.println(folderId);
					}
				}
				String extension = getFileExtension(file.getName());
				Map<String, Object> properties2 = new HashMap<String, Object>();
				properties2.put(PropertyIds.OBJECT_TYPE_ID, "cmis:document");
				properties2.put(PropertyIds.NAME, file.getName()+ "(" +timeMilli +")."+ extension);
				
				// if folder is not there
				
				if (child == null) {
					Map<String, Object> properties = new HashMap<String, Object>();
					properties.put(PropertyIds.OBJECT_TYPE_ID, "cmis:folder");
					properties.put(PropertyIds.NAME, folderName); // folder
																	// name

					child = parent.createFolder(properties);
				}
				 else {

						count = 0;
						CmisObject o = session.getObject(folderId);
						child = (Folder) o;
						ItemIterable<CmisObject> documents = child.getChildren();
						System.out.println(documents);
						for (CmisObject O : documents) {
							System.out.println(O.getId());
							CmisObject document = session.getObject(O.getId());
							System.out.println(document);
							Document doc = (Document) session.getObject(O.getId());
							ContentStream contentStream = doc.getContentStream(); // returns
																					// null
																					// if
																					// the
																					// document
																					// has
																					// no
																					// content
//							if (doc.getName().equals(file.getName())) {
//								System.out.println("Deleting document " + doc.getName());
//								doc.delete(true);
//							}
							//

						}
					}

					System.out.println(file.getName());
					String extention = getFileExtension(file.getName());
					
					
					String mimeType = getMIMEtype(extention.toLowerCase());

					InputStream targetStream = new FileInputStream(file);
					ContentStream contentStream = new ContentStreamImpl(file.getName()+ "(" +timeMilli +")."+ extension,
							BigInteger.valueOf(file.length()), mimeType, targetStream);
					// create a major version
					Document newDoc = child.createDocument(properties2, contentStream, VersioningState.MAJOR);

					System.out.println(newDoc.getId());
					response.setCode(ApplicationConstants.CODE_SUCCESS);
					response.setStatus(ApplicationConstants.SUCCESS);
					response.setMessage("Document Updated Succesfully");
					response.setDocumentId(newDoc.getId());
					response.setFileName(fileName);
					response.setFileSize(fileSize);
				count = count + 1;
				
		
			}catch(Exception e) {
				response.setCode(ApplicationConstants.CODE_FAILURE);
				response.setStatus(ApplicationConstants.FAILURE);
				response.setMessage("Failed due to " + e.getMessage());	
			}
			
			return response;
		}
		
	}

	

